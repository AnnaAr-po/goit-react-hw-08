import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

axios.defaults.baseURL = "https://connections-api.goit.global";



const setAuthHeader = (token) => {
  axios.defaults.headers.common.Authorization = `Bearer ${token}`;
};

// ‚úÖ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
const clearAuthHeader = () => {
  axios.defaults.headers.common.Authorization = "";
};

// üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const registerThunk = createAsyncThunk(
  "auth/register",
  async (credentials, thunkApi) => {
    try {
      const { data } = await axios.post("/users/signup", credentials);
      setAuthHeader(data.token); // ‚úÖ –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
      return data;
    } catch (error) {
      return thunkApi.rejectWithValue(error.message);
    }
  }
);

// üîπ –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const loginThunk = createAsyncThunk(
  "auth/login",
  async (credentials, thunkApi) => {
    try {
      const { data } = await axios.post("/users/login", credentials);
      setAuthHeader(data.token); // ‚úÖ –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É
      return data;
    } catch (error) {
      return thunkApi.rejectWithValue(error.message);
    }
  }
);

// üîπ –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const logoutThunk = createAsyncThunk("auth/logout", async (_, thunkApi) => {
  try {
    await axios.post("/users/logout");
    clearAuthHeader(); // ‚úÖ –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
  } catch (error) {
    return thunkApi.rejectWithValue(error.message);
  }
});

// üîπ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞)
export const refreshThunk = createAsyncThunk("auth/refresh", async (_, thunkApi) => {
  const state = thunkApi.getState();
  const persistedToken = state.auth.token;

  if (!persistedToken) {
    return thunkApi.rejectWithValue("No token found");
  }

  setAuthHeader(persistedToken); // ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º

  try {
    const { data } = await axios.get("/users/current");
    return data;
  } catch (error) {
    return thunkApi.rejectWithValue(error.message);
  }
});